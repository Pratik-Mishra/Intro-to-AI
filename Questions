Part 1
a) The threshold where the majority of enviornments are solvable seems to be p < .25, and p > .25 seems to have majority unsolvable.


b) Instead of running A* search here, is there a better algorithm that can be used to determine the solvability of
an environment quickly? Discuss.

Best first search could give faster results since it does not take into consideration the distance from the path to the current node.
Therefore it can find a shortest path, but maybe not the optimal path, whereas A* would look for another path once it figures out it
not on the optimal path.


Part 2
Pritish claims that if two consistent heuristics h1(s) and h2(s) are available for the same problem, then at every
state s, either h(s) = max(h1(s), h2(s)) or h(s) = min(h1(s), h2(s)) will be a consistent heuristic. Is he correct?
Argue mathematically or provide a counter-example.

h1 and h2 are both consistent heuristics. Therefore, either of the two (max or min) will also be consistent since there are only two
consistent heuristics to choose from.


Part 3
Aravind claims that the priority of a cell can be calculated as c × f(s) − g(s), where c is a constant. For what
values of c will this priority favor larger g-values? For what values of c will it favor lower g-values? Try to be as
specific as possible.



Part 4
On the search problem illustrated in Fig 2, illustrate (either using ASCII printouts or any other visualization
tool), the operation of Repeated Backward A*. The illustration must look similar to Fig 3, i.e. you must show at
each time step:
• the current location of the agent,
• the agent’s knowledge about blocked and unknown cells, and
• the trajectory (path) computed by the agent at that timestep.


Neelesh remarks that the path found by Repeated A* is a shortest path, but not necessarily the optimal path
from the start to the goal. Provide an example to prove him right.

S000000000000000
1110111111111110
1110111111111110
1110000000111110
1111111110111110
0000000000111110
0111111111111110
000000000000000F

S:= start
F:= finish
0:= unblocked
1:= blocked

Following a Euclidian heuristic, the algorithm will try to take the windier path because it initially goes closer to the finish.
However, the optimal path would be the alternate path which goes all the way right, then straight down.
